name: Merge and pull request to main branch #describes the action 
on:
  workflow_dispatch:    #This will allow running github actions workflow manually
    inputs:
      lock_id: # This input will be used to provide the lock ID for the force-unlock job
        description: 'Terraform Lock ID to force unlock'
        required: true

  #events that triggers the workflow      
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:                            #environment variables containing terraform version the workflow will install
  TERRAFORM_VERSION: 1.3.5     
  # TERRAGRUNT_VERSION: 0.40.0
  TERRAFORM_WORKING_DIR: './infrastructure/region/us-east-1/dev/ec2'  #terraform working directory path

#Give Github actions permission to repository
permissions:
  contents: write       # write permissions are needed in order to commit changes back to the branches
  issues: write         # write permission are needed in order to create comments
  id-token: write

concurrency: dev-reinvent    # This wills ensure only a single workflow of merge to main is run at a time

jobs:
  kics:
    #Kics perform statics codes analysis of Infrastructure of Code (Terraform).
    #More details can be found here: https://docs.kics.io/latest/
    name: "Run Kics scan on Terraform code"
    uses: ./.github/workflows/terraform_kics.yml
    with:
      # Enabling Comments will add a comment to a PR, but these do no exist in Push events and will throw an error.
      ENABLE_COMMENTS: true
      WORKING_DIRECTORY: './'

  plan:
    name: "Terraform Init,Validate and Plan"
    needs: [ kics ]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-20.04    #the Operating system the workflow will run on
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
           # This will checkout the branch the PR is coming from in the head repo to avoid checkoing out repo in a detached state
           ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      # - name: Setup Terragrunt
      #   uses: autero1/action-terragrunt@v1.2.0
      #   with:
      #     terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init #terragrunt run-all init -no-color --terragrunt-non-interactive

      - name: Terraform Validate
        id: validate
        run:  terraform validate #terragrunt run-all validate -no-color --terragrunt-non-interactive

      - name: Terraform Plan
        id: plan
        run: |
         terraform plan 
        # terraform show tfplan
        continue-on-error: true

  apply:
    name: "Terraform Apply"
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      # - name: Setup Terragrunt
      #   uses: autero1/action-terragrunt@v1.2.0
      #   with:
      #     terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        id: init
        run : terraform init # run-all init -no-color --terragrunt-non-interactive

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve #run-all apply -no-color --terragrunt-non-interactive
        continue-on-error: true
      
    # - name: Clean up
      # run: terraform destroy -auto-approve
  
  # New job for force-unlocking Terraform state
  force-unlock:
    name: "Force Unlock Terraform State"
    # This job runs only when manually triggered
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Force Unlock
        run: |
          terraform init
          terraform force-unlock -force ${{ github.event.inputs.lock_id }}
        # Using the lock_id input from the workflow_dispatch to unlock the state